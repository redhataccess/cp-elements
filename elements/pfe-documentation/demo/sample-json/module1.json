{
  "module": {
    "module_uuid": "db81baac-958f-43eb-806d-0977c2e4ac64",
    "description": "Banking example decisions (pattern matching, sorting, and calculation)",
    "locale": "en-us",
    "title": "Banking example decisions (pattern matching, sorting, and calculation)",
    "body": "<article class=\"rhdocs\" id=\"rhdocs\"> \n <header class=\"rhdocs-header\" id=\"rhdocs-header\"> \n  <h1>Banking example decisions (pattern matching, sorting, and calculation)</h1> \n  <ul class=\"rhdocs-details\"> \n   <li class=\"rh-docs-details-item rhdocs-products\"> <span class=\"rhdocs-product-name\">A Test Product RH_cqob</span> <span class=\"rhdocs-product-version\">1.1</span> </li> \n   <li class=\"rh-docs-details-item rhdocs-updated-date\">Updated 01 April 2020</li> \n   <li class=\"rh-docs-details-item rhdocs-published-date\">Published 09 April 2020</li> \n  </ul> \n </header> \n <main class=\"rhdocs-content\" id=\"rhdocs-content\"> \n  <p>The Banking example decision set demonstrates the process of developing a complete personal banking application to handle credits and debits in multiple accounts. The example uses a set of design patterns that have been created for the banking process.</p> \n  <p>The following is an overview of the Banking example:</p> \n  <ul> \n   <li> <p><strong>Name</strong>: <code>banking</code></p> </li> \n   <li> <p><strong>Main class</strong>: <code>org.drools.examples.banking.BankingExamplesApp</code> (in <code>src/main/java</code>)</p> </li> \n   <li> <p><strong>Module</strong>: <code>drools-examples</code></p> </li> \n   <li> <p><strong>Type</strong>: Java application</p> </li> \n   <li> <p><strong>Rule files</strong>: <code>org.drools.examples.banking.*.drl</code> (in <code>src/main/resources</code>)</p> </li> \n   <li> <p><strong>Objective</strong>: Demonstrates pattern matching, basic sorting, and calculation</p> </li> \n  </ul> \n  <p>In this example, the class <code>RuleRunner</code> executes one or more DRL files against a set of data. The class compiles the packages and creates the KIE base for each execution, enabling you to easily execute each scenario and inspect the outputs. In a production environment, the KIE base should be built just once and cached, but for the purposes of this example, the <code>RuleRunner</code> class is used for efficiency.</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">RuleRunner class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class RuleRunner {\n\n    public RuleRunner() {\n    }\n\n    public void runRules(String[] rules,\n                         Object[] facts) throws Exception {\n\n        KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();\n        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();\n\n        for ( int i = 0; i &lt; rules.length; i++ ) {\n            String ruleFile = rules[i];\n            System.out.println( \"Loading file: \" + ruleFile );\n            kbuilder.add( ResourceFactory.newClassPathResource( ruleFile,\n                                                                RuleRunner.class ),\n                          ResourceType.DRL );\n        }\n\n        Collection&lt;KnowledgePackage&gt; pkgs = kbuilder.getKnowledgePackages();\n        kbase.addKnowledgePackages( pkgs );\n        StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();\n\n        for ( int i = 0; i &lt; facts.length; i++ ) {\n            Object fact = facts[i];\n            System.out.println( \"Inserting fact: \" + fact );\n            ksession.insert( fact );\n        }\n\n        ksession.fireAllRules();\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>To execute the example, run the <code>org.drools.examples.banking.BankingExamplesApp</code> class as a Java application in your IDE.</p> \n  <p>After the execution, a basic user interface window appears that you can use to run each example within the example set:</p> \n  <p>Each example that you run displays an execution output in the IDE console window:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample1 execution output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example1.drl\nRule 01 Works</code></pre> \n   </div> \n  </div> \n  <h2 class=\"discrete\" id=\"_preliminary_classes_and_rules\">Preliminary classes and rules</h2> \n  <p>The first sample Java class <code>BankingExample1</code> loads and executes a single DRL file, <code>Example.drl</code>, without inserting any data:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample1 class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample1 {\n    public static void main(String[] args) throws Exception {\n        new RuleRunner().runRules( new String[] { \"Example1.drl\" },\n                                   new Object[0] );\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The first sample rule <code>Example1.drl</code> has a single <code>eval</code> condition that is always true so that this rule will match and fire one time after the start:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rule in Example1.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 01\"\n    when\n        eval( 1==1 )\n    then\n        System.out.println( \"Rule 01 Works\" );\nend</code></pre> \n   </div> \n  </div> \n  <p>When you execute the rule, the following output shows that the rule matches and executes the single print statement:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample1.java output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example1.drl\nRule 01 Works</code></pre> \n   </div> \n  </div> \n  <p>The next class <code>BankingExample2</code> asserts basic facts and prints the output:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample2 class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample2 {\n    public static void main(String[] args) {\n        Number[] numbers = new Number[] {wrap(3), wrap(1), wrap(4), wrap(1), wrap(5)};\n        new RuleRunner().runRules( new String[] { \"Example2.drl\" },\n                                   numbers );\n    }\n\n    private static Integer wrap(int i) {\n        return new Integer(i);\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The Banking example does not use any specific facts and instead asserts a set of <code>java.lang.Integer</code> objects. In a production environment, a number is not a useful fact, but for the sake of this example, this approach is used to demonstrate basic techniques before more complexity is added.</p> \n  <p>The <code>Example2.drl</code> rule prints the numbers:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rule in Example2.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 02\"\n    when\n        Number( $intValue : intValue )\n    then\n        System.out.println( \"Number found with value: \" + $intValue );\nend</code></pre> \n   </div> \n  </div> \n  <p>This rule identifies any facts that are <code>Number</code> objects and prints out the values. Notice the use of the abstract class <code>Number</code>. Although this example inserts <code>Integer</code> objects, the rule now identifies any kind of number. The pattern-matching functionality of the decision engine is able to match interfaces and superclasses of asserted objects.</p> \n  <p>The output shows the DRL being loaded, the facts inserted, and then the matched and fired rules. Each inserted number is matched, fired, and printed:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample2.java output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example2.drl\nInserting fact: 3\nInserting fact: 1\nInserting fact: 4\nInserting fact: 1\nInserting fact: 5\nNumber found with value: 5\nNumber found with value: 1\nNumber found with value: 4\nNumber found with value: 1\nNumber found with value: 3</code></pre> \n   </div> \n  </div> \n  <p>You can use more efficient ways to sort numbers than using rules, but because other segments of the Banking example apply cash flows in date order in banking rules, the example uses a basic rule-based sorting technique.</p> \n  <p>In the <code>BankingExample3.java</code> class, the example again inserts the <code>Integer</code> objects but uses <code>Example3.drl</code>:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample3.java class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample3 {\n    public static void main(String[] args) {\n        Number[] numbers = new Number[] {wrap(3), wrap(1), wrap(4), wrap(1), wrap(5)};\n        new RuleRunner().runRules( new String[] { \"Example3.drl\" },\n                                   numbers );\n    }\n\n    private static Integer wrap(int i) {\n        return new Integer(i);\n    }\n}</code></pre> \n   </div> \n  </div> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rule in Example3.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 03\"\n    when\n        $number : Number( )\n        not Number( intValue &lt; $number.intValue )\n    then\n        System.out.println(\"Number found with value: \" + $number.intValue() );\n        delete( $number );\nend</code></pre> \n   </div> \n  </div> \n  <p>The <code>when</code> condition of the rule identifies a <code>Number</code> and extracts the value, and then ensures that no number exists that is smaller than the one found by the first pattern. The typical behavior is to match only one number, the smallest in the set. However, the deletion (retraction) of the number after it has been printed means that the smallest number has been removed, revealing the next smallest number, and so on.</p> \n  <p>The resulting output shows that the numbers are now sorted numerically:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample3.java class output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example3.drl\nInserting fact: 3\nInserting fact: 1\nInserting fact: 4\nInserting fact: 1\nInserting fact: 5\nNumber found with value: 1\nNumber found with value: 1\nNumber found with value: 3\nNumber found with value: 4\nNumber found with value: 5</code></pre> \n   </div> \n  </div> \n  <h2 class=\"discrete\" id=\"_cash_flow_classes_and_rules\">Cash flow classes and rules</h2> \n  <p>From this point, the Banking example begins to demonstrate personal accounting rules with cash flow.</p> \n  <p>The example first creates a <code>Cashflow</code> object:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Cashflow class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class Cashflow {\n    private Date   date;\n    private double amount;\n\n    public Cashflow() {\n    }\n\n    public Cashflow(Date date, double amount) {\n        this.date = date;\n        this.amount = amount;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public double getAmount() {\n        return amount;\n    }\n\n    public void setAmount(double amount) {\n        this.amount = amount;\n    }\n\n    public String toString() {\n        return \"Cashflow[date=\" + date + \",amount=\" + amount + \"]\";\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The <code>Cashflow</code> class has the following two attributes:</p> \n  <ul> \n   <li> <p><code>date</code></p> </li> \n   <li> <p><code>amount</code></p> </li> \n  </ul> \n  <p>The class also contains an overloaded constructor to set the values, and a method <code>toString</code> to print a cash flow. Although the example uses the type <code>double</code> for efficiency, in a production environment, use a different approach for monetary units because floating point numbers cannot represent most numbers accurately.</p> \n  <p>The <code>BankingExample4.java</code> class inserts five <code>Cashflow</code> objects, with varying dates and amounts:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample4.java class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample4 {\n    public static void main(String[] args) throws Exception {\n        Object[] cashflows = {\n            new Cashflow(new SimpleDate(\"01/01/2007\"), 300.00),\n            new Cashflow(new SimpleDate(\"05/01/2007\"), 100.00),\n            new Cashflow(new SimpleDate(\"11/01/2007\"), 500.00),\n            new Cashflow(new SimpleDate(\"07/01/2007\"), 800.00),\n            new Cashflow(new SimpleDate(\"02/01/2007\"), 400.00),\n        };\n\n        new RuleRunner().runRules( new String[] { \"Example4.drl\" },\n                                   cashflows );\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The convenience class <code>SimpleDate</code> extends <code>java.util.Date</code>, providing a constructor that takes a String as input and defines a date format:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">SimpleDate class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class SimpleDate extends Date {\n    private static final SimpleDateFormat format = new SimpleDateFormat(\"dd/MM/yyyy\");\n\n    public SimpleDate(String datestr) throws Exception {\n        setTime(format.parse(datestr).getTime());\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The rule <code>Example4.drl</code> then prints the sorted <code>Cashflow</code> objects:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rule in Example4.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 04\"\n    when\n        $cashflow : Cashflow( $date : date, $amount : amount )\n        not Cashflow( date &lt; $date)\n    then\n        System.out.println(\"Cashflow: \"+$date+\" :: \"+$amount);\n        delete($cashflow);\nend</code></pre> \n   </div> \n  </div> \n  <p>The <code>when</code> condition of the rule identifies a <code>Cashflow</code> object and extracts the date and the amount, and then ensures that no <code>Cashflow</code> object exists with an earlier date than the one found.</p> \n  <p>The <code>then</code> action of the rule prints the <code>Cashflow</code> object that satisfies the rule and then deletes (retracts) it, making way for the next earliest <code>Cashflow</code>.</p> \n  <p>The resulting output shows the selected cash flow:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample4.java class output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example4.drl\nInserting fact: Cashflow[date=Mon Jan 01 00:00:00 GMT 2007,amount=300.0]\nInserting fact: Cashflow[date=Fri Jan 05 00:00:00 GMT 2007,amount=100.0]\nInserting fact: Cashflow[date=Thu Jan 11 00:00:00 GMT 2007,amount=500.0]\nInserting fact: Cashflow[date=Sun Jan 07 00:00:00 GMT 2007,amount=800.0]\nInserting fact: Cashflow[date=Tue Jan 02 00:00:00 GMT 2007,amount=400.0]\nCashflow: Mon Jan 01 00:00:00 GMT 2007 :: 300.0\nCashflow: Tue Jan 02 00:00:00 GMT 2007 :: 400.0\nCashflow: Fri Jan 05 00:00:00 GMT 2007 :: 100.0\nCashflow: Sun Jan 07 00:00:00 GMT 2007 :: 800.0\nCashflow: Thu Jan 11 00:00:00 GMT 2007 :: 500.0</code></pre> \n   </div> \n  </div> \n  <p>Next, the example extends the <code>Cashflow</code> object, resulting in a <code>TypedCashflow</code> that can be a credit or a debit operation. The example could add this to the <code>Cashflow</code> type, but to keep the previous version of the class intact, the example uses the extension:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">TypedCashflow class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class TypedCashflow extends Cashflow {\n    public static final int CREDIT = 0;\n    public static final int DEBIT  = 1;\n\n    private int             type;\n\n    public TypedCashflow() {\n    }\n\n    public TypedCashflow(Date date, int type, double amount) {\n        super( date, amount );\n        this.type = type;\n    }\n\n    public int getType() {\n        return type;\n    }\n\n    public void setType(int type) {\n        this.type = type;\n    }\n\n    public String toString() {\n        return \"TypedCashflow[date=\" + getDate() +\n               \",type=\" + (type == CREDIT ? \"Credit\" : \"Debit\") +\n               \",amount=\" + getAmount() + \"]\";\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The sample class <code>BankingExample5</code> runs the <code>TypedCashflow</code> code:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample5.java class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample5 {\n    public static void main(String[] args) throws Exception {\n        Object[] cashflows = {\n            new TypedCashflow(new SimpleDate(\"01/01/2007\"),\n                              TypedCashflow.CREDIT, 300.00),\n            new TypedCashflow(new SimpleDate(\"05/01/2007\"),\n                              TypedCashflow.CREDIT, 100.00),\n            new TypedCashflow(new SimpleDate(\"11/01/2007\"),\n                              TypedCashflow.CREDIT, 500.00),\n            new TypedCashflow(new SimpleDate(\"07/01/2007\"),\n                              TypedCashflow.DEBIT, 800.00),\n            new TypedCashflow(new SimpleDate(\"02/01/2007\"),\n                              TypedCashflow.DEBIT, 400.00),\n        };\n\n        new RuleRunner().runRules( new String[] { \"Example5.drl\" },\n                                   cashflows );\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>This class creates a set of <code>TypedCashflow</code> objects that are either credit or debit operations and uses the <code>Example5.drl</code> rule to print the sorted <code>TypedCashflow</code> objects:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rule in Example5.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 05\"\n    when\n        $cashflow : TypedCashflow( $date : date,\n                                   $amount : amount,\n                                   type == TypedCashflow.CREDIT )\n        not TypedCashflow( date &lt; $date,\n                           type == TypedCashflow.CREDIT )\n    then\n        System.out.println(\"Credit: \"+$date+\" :: \"+$amount);\n        delete($cashflow);\nend</code></pre> \n   </div> \n  </div> \n  <p>The <code>when</code> condition of the rule identifies a <code>TypedCashflow</code> fact with a type of <code>CREDIT</code> and extracts the date and the amount. The condition then ensures that no <code>TypedCashflow</code> of the same type exists with an earlier date than the one found.</p> \n  <p>The <code>then</code> action of the rule prints the <code>Cashflow</code> object that satisfies the patterns and then deletes (retracts) it, making way for the next earliest <code>Cashflow</code> of type <code>CREDIT</code>.</p> \n  <p>The resulting output shows the selected <code>TypedCashflow</code>:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample5.java class output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre>Loading file: Example5.drl\nInserting fact: TypedCashflow[date=Mon Jan 01 00:00:00 GMT 2007,type=Credit,amount=300.0]\nInserting fact: TypedCashflow[date=Fri Jan 05 00:00:00 GMT 2007,type=Credit,amount=100.0]\nInserting fact: TypedCashflow[date=Thu Jan 11 00:00:00 GMT 2007,type=Credit,amount=500.0]\nInserting fact: TypedCashflow[date=Sun Jan 07 00:00:00 GMT 2007,type=Debit,amount=800.0]\nInserting fact: TypedCashflow[date=Tue Jan 02 00:00:00 GMT 2007,type=Debit,amount=400.0]\nCredit: Mon Jan 01 00:00:00 GMT 2007 :: 300.0\nCredit: Fri Jan 05 00:00:00 GMT 2007 :: 100.0\nCredit: Thu Jan 11 00:00:00 GMT 2007 :: 500.0</pre> \n   </div> \n  </div> \n  <h2 class=\"discrete\" id=\"_accounts_and_allocated_cash_flow_classes_and_rules\">Accounts and allocated cash flow classes and rules</h2> \n  <p>The next phase of the Banking example processes both credits and debits in two bank accounts and calculates the account balance. In order to do this, the example creates two separate <code>Account</code> objects and inserts them into the <code>Cashflow</code> objects before passing them to the decision engine. Creating the objects in this way provides easy access to the correct account without using helper classes.</p> \n  <p>The <code>Account</code> class is a basic Java object with an account number and balance:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Account class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class Account {\n    private long   accountNo;\n    private double balance = 0;\n\n    public Account() {\n    }\n\n    public Account(long accountNo) {\n        this.accountNo = accountNo;\n    }\n\n    public long getAccountNo() {\n        return accountNo;\n    }\n\n    public void setAccountNo(long accountNo) {\n        this.accountNo = accountNo;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n\n    public String toString() {\n        return \"Account[\" + \"accountNo=\" + accountNo + \",balance=\" + balance + \"]\";\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The <code>AllocatedCashflow</code> class extends <code>TypedCashflow</code> to include an <code>Account</code> reference:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">AllocatedCashflow class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class AllocatedCashflow extends TypedCashflow {\n    private Account account;\n\n    public AllocatedCashflow() {\n    }\n\n    public AllocatedCashflow(Account account,\n                             Date date,\n                             int type,\n                             double amount) {\n        super( date,\n               type,\n               amount );\n        this.account = account;\n    }\n\n    public Account getAccount() {\n        return account;\n    }\n\n    public void setAccount(Account account) {\n        this.account = account;\n    }\n\n    public String toString() {\n        return \"AllocatedCashflow[\" +\n               \"account=\" + account +\n               \",date=\" + getDate() +\n               \",type=\" + (getType() == CREDIT ? \"Credit\" : \"Debit\") +\n               \",amount=\" + getAmount() + \"]\";\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The <code>BankingExample6.java</code> creates two <code>Account</code> objects and passes one of them into each <code>Cashflow</code> object in the constructor call:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample6.java class</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code class=\"language-java\" data-lang=\"java\">public class BankingExample6 {\n    public static void main(String[] args) {\n        Account acc1 = new Account(1);\n        Account acc2 = new Account(2);\n\n        Object[] cashflows = {\n            new AllocatedCashflow(acc1,new SimpleDate(\"01/01/2007\"),\n                                  TypedCashflow.CREDIT, 300.00),\n            new AllocatedCashflow(acc1,new SimpleDate(\"05/02/2007\"),\n                                  TypedCashflow.CREDIT, 100.00),\n            new AllocatedCashflow(acc2,new SimpleDate(\"11/03/2007\"),\n                                  TypedCashflow.CREDIT, 500.00),\n            new AllocatedCashflow(acc1,new SimpleDate(\"07/02/2007\"),\n                                  TypedCashflow.DEBIT,  800.00),\n            new AllocatedCashflow(acc2,new SimpleDate(\"02/03/2007\"),\n                                  TypedCashflow.DEBIT,  400.00),\n            new AllocatedCashflow(acc1,new SimpleDate(\"01/04/2007\"),\n                                  TypedCashflow.CREDIT, 200.00),\n            new AllocatedCashflow(acc1,new SimpleDate(\"05/04/2007\"),\n                                  TypedCashflow.CREDIT, 300.00),\n            new AllocatedCashflow(acc2,new SimpleDate(\"11/05/2007\"),\n                                  TypedCashflow.CREDIT, 700.00),\n            new AllocatedCashflow(acc1,new SimpleDate(\"07/05/2007\"),\n                                  TypedCashflow.DEBIT,  900.00),\n            new AllocatedCashflow(acc2,new SimpleDate(\"02/05/2007\"),\n                                  TypedCashflow.DEBIT,  100.00)\n        };\n\n        new RuleRunner().runRules( new String[] { \"Example6.drl\" },\n                                   cashflows );\n    }\n}</code></pre> \n   </div> \n  </div> \n  <p>The rules in <code>Example6.drl</code> apply each <code>Cashflow</code> object in date order and then calculate and print the balance:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">Rules in Example6.drl</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>rule \"Rule 06 - Credit\"\n    when\n        $cashflow : AllocatedCashflow( $account : account,\n                                       $date : date,\n                                       $amount : amount,\n                                       type == TypedCashflow.CREDIT )\n        not AllocatedCashflow( account == $account, date &lt; $date)\n    then\n        System.out.println(\"Credit: \" + $date + \" :: \" + $amount);\n        $account.setBalance($account.getBalance()+$amount);\n        System.out.println(\"Account: \" + $account.getAccountNo() +\n                           \" - new balance: \" + $account.getBalance());\n        delete($cashflow);\nend\n\nrule \"Rule 06 - Debit\"\n    when\n        $cashflow : AllocatedCashflow( $account : account,\n                            $date : date,\n                            $amount : amount,\n                            type == TypedCashflow.DEBIT )\n        not AllocatedCashflow( account == $account, date &lt; $date)\n    then\n        System.out.println(\"Debit: \" + $date + \" :: \" + $amount);\n        $account.setBalance($account.getBalance() - $amount);\n        System.out.println(\"Account: \" + $account.getAccountNo() +\n                           \" - new balance: \" + $account.getBalance());\n        delete($cashflow);\nend</code></pre> \n   </div> \n  </div> \n  <p>Although the example uses separate rules for credits and debits, the example does not specify a type when checking for earlier cash flows so that all cash flows are applied in date order, regardless of the cash flow type.</p> \n  <p>The <code>when</code> conditions of the rules identify the relevant account and the <code>then</code> actions of the rules update the account with the cash flow amount.</p> \n  <p>The resulting output shows the selected <code>AllocatedCashflow</code>:</p> \n  <div class=\"listingblock\"> \n   <strong class=\"heading\">BankingExample6.java class output in the IDE console</strong> \n   <div class=\"content\"> \n    <pre class=\"highlight\"><code>Loading file: Example6.drl\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon Jan 01 00:00:00 GMT 2007,type=Credit,amount=300.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon Feb 05 00:00:00 GMT 2007,type=Credit,amount=100.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Sun Mar 11 00:00:00 GMT 2007,type=Credit,amount=500.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Wed Feb 07 00:00:00 GMT 2007,type=Debit,amount=800.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Fri Mar 02 00:00:00 GMT 2007,type=Debit,amount=400.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Sun Apr 01 00:00:00 BST 2007,type=Credit,amount=200.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Thu Apr 05 00:00:00 BST 2007,type=Credit,amount=300.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Fri May 11 00:00:00 BST 2007,type=Credit,amount=700.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=1,balance=0.0],date=Mon May 07 00:00:00 BST 2007,type=Debit,amount=900.0]\nInserting fact: AllocatedCashflow[account=Account[accountNo=2,balance=0.0],date=Wed May 02 00:00:00 BST 2007,type=Debit,amount=100.0]\nDebit: Fri Mar 02 00:00:00 GMT 2007 :: 400.0\nAccount: 2 - new balance: -400.0\nCredit: Sun Mar 11 00:00:00 GMT 2007 :: 500.0\nAccount: 2 - new balance: 100.0\nDebit: Wed May 02 00:00:00 BST 2007 :: 100.0\nAccount: 2 - new balance: 0.0\nCredit: Fri May 11 00:00:00 BST 2007 :: 700.0\nAccount: 2 - new balance: 700.0\nCredit: Mon Jan 01 00:00:00 GMT 2007 :: 300.0\nAccount: 1 - new balance: 300.0\nCredit: Mon Feb 05 00:00:00 GMT 2007 :: 100.0\nAccount: 1 - new balance: 400.0\nDebit: Wed Feb 07 00:00:00 GMT 2007 :: 800.0\nAccount: 1 - new balance: -400.0\nCredit: Sun Apr 01 00:00:00 BST 2007 :: 200.0\nAccount: 1 - new balance: -200.0\nCredit: Thu Apr 05 00:00:00 BST 2007 :: 300.0\nAccount: 1 - new balance: 100.0\nDebit: Mon May 07 00:00:00 BST 2007 :: 900.0\nAccount: 1 - new balance: -800.0</code></pre> \n   </div> \n  </div> \n </main> \n</article>",
    "search_keywords": [],
    "products": [
      {
        "product_version": "1.1",
        "product_name": "A Test Product RH_cqob",
        "product_link": "https://www.redhat.com/productlinkplaceholder"
      }
    ],
    "content_type": "module",
    "date_modified": "2020-04-01T15:16:18.803Z",
    "date_published": "2020-04-09T19:31:16.652Z",
    "vanity_url_fragment": "/test",
    "context_id": "",
    "headline": "",
    "module_url_fragment": "llutest/modules/Examples/con_decision-examples-banking-ref.adoc",
    "view_uri": "https://access.qa.redhat.com/topics/en-us/db81baac-958f-43eb-806d-0977c2e4ac64",
    "revision_id": "1",
    "status": "published",
    "context_url_fragment": ""
  },
  "message": "Module Found",
  "status": 200
}
